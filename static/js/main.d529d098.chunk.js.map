{"version":3,"sources":["components/Home.js","components/Titles.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Component","Titles","Link","to","Switch","Route","exact","component","Title1","Title2","App","className","BrowserRouter","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAUeA,0LANP,OACIC,EAAAC,EAAAC,cAAA,oCAHOC,sCCiBJC,mLAdP,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,kBAAT,YACLN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,kBAAT,YACLN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,OAAK,EAACH,GAAG,iBAAiBI,UAAWC,IAC5CX,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,OAAK,EAACH,GAAG,iBAAiBI,UAAWE,aAT3CT,aAkBfQ,EAAS,WACX,OACIX,EAAAC,EAAAC,cAAA,wBAGFU,EAAS,WACX,OACIZ,EAAAC,EAAAC,cAAA,gCCCOW,mLArBX,OACEb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,UAAQY,UAAU,cAAlB,qBAEAd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,SAAT,SACLN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,WAAT,WACPN,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOQ,KAAK,QAAQN,UAAWX,IAC/BC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOQ,KAAK,UAAUN,UAAWN,eAZvBD,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d529d098.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>Home component</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\n\r\nclass Titles extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Titles component</div>\r\n                <div><Link to=\"/titles/title1\">title 1</Link></div>\r\n                <div><Link to=\"/titles/title2\">title 2</Link></div>\r\n                <Switch>\r\n                    <Route exact to='/titles/title1' component={Title1}/>\r\n                    <Route exact to='/titles/title2' component={Title2}/>\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Titles;\r\n\r\nconst Title1 = () => {\r\n    return (\r\n        <div>Title #1</div>\r\n    )\r\n}\r\nconst Title2 = () => {\r\n    return (\r\n        <div>Title #2</div>\r\n    )\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './components/Home'\nimport Titles from './components/Titles'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        Main app component\n        <Router>\n          <div>\n\n          <div><Link to='/home' >home</Link></div>\n          <div><Link to='/titles' >titles</Link></div>\n        <Route path='/home' component={Home} />\n        <Route path='/titles' component={Titles} />\n      \n          </div>\n        </Router>\n         \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}